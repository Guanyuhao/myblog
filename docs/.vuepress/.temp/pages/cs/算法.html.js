import comp from "/Users/guanhaha/Desktop/code/myblog/docs/.vuepress/.temp/pages/cs/算法.html.vue"
const data = JSON.parse("{\"path\":\"/cs/%E7%AE%97%E6%B3%95.html\",\"title\":\"算法\",\"lang\":\"en-US\",\"frontmatter\":{\"description\":\"算法 时间复杂度 通常使用最差的时间复杂度来衡量一个算法的好坏。 常数时间 O(1) 代表这个操作和数据量没关系，是一个固定时间的操作，比如说四则运算。 对于一个算法来说，可能会计算出如下操作次数 aN + 1，N 代表数据量。那么该算法的时间复杂度就是 O(N)。因为我们在计算时间复杂度的时候，数据量通常是非常大的，这时候低阶项和常数项可以忽略不计。...\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://guanyuhao.github.io/cs/%E7%AE%97%E6%B3%95.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"关哈哈\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"算法\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"算法 时间复杂度 通常使用最差的时间复杂度来衡量一个算法的好坏。 常数时间 O(1) 代表这个操作和数据量没关系，是一个固定时间的操作，比如说四则运算。 对于一个算法来说，可能会计算出如下操作次数 aN + 1，N 代表数据量。那么该算法的时间复杂度就是 O(N)。因为我们在计算时间复杂度的时候，数据量通常是非常大的，这时候低阶项和常数项可以忽略不计。...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"en-US\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2019-12-03T08:40:11.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2019-12-03T08:40:11.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"算法\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2019-12-03T08:40:11.000Z\\\",\\\"author\\\":[]}\"]]},\"headers\":[{\"level\":2,\"title\":\"左移 <<\",\"slug\":\"左移\",\"link\":\"#左移\",\"children\":[]},{\"level\":2,\"title\":\"算数右移 >>\",\"slug\":\"算数右移\",\"link\":\"#算数右移\",\"children\":[]},{\"level\":2,\"title\":\"按位操作\",\"slug\":\"按位操作\",\"link\":\"#按位操作\",\"children\":[]},{\"level\":2,\"title\":\"冒泡排序\",\"slug\":\"冒泡排序\",\"link\":\"#冒泡排序\",\"children\":[]},{\"level\":2,\"title\":\"插入排序\",\"slug\":\"插入排序\",\"link\":\"#插入排序\",\"children\":[]},{\"level\":2,\"title\":\"选择排序\",\"slug\":\"选择排序\",\"link\":\"#选择排序\",\"children\":[]},{\"level\":2,\"title\":\"归并排序\",\"slug\":\"归并排序\",\"link\":\"#归并排序\",\"children\":[]},{\"level\":2,\"title\":\"快排\",\"slug\":\"快排\",\"link\":\"#快排\",\"children\":[{\"level\":3,\"title\":\"面试题\",\"slug\":\"面试题\",\"link\":\"#面试题\",\"children\":[]}]},{\"level\":2,\"title\":\"堆排序\",\"slug\":\"堆排序\",\"link\":\"#堆排序\",\"children\":[]},{\"level\":2,\"title\":\"系统自带排序实现\",\"slug\":\"系统自带排序实现\",\"link\":\"#系统自带排序实现\",\"children\":[]},{\"level\":2,\"title\":\"反转单向链表\",\"slug\":\"反转单向链表\",\"link\":\"#反转单向链表\",\"children\":[]},{\"level\":2,\"title\":\"二叉树的先序，中序，后序遍历\",\"slug\":\"二叉树的先序-中序-后序遍历\",\"link\":\"#二叉树的先序-中序-后序遍历\",\"children\":[{\"level\":3,\"title\":\"递归实现\",\"slug\":\"递归实现\",\"link\":\"#递归实现\",\"children\":[]},{\"level\":3,\"title\":\"非递归实现\",\"slug\":\"非递归实现\",\"link\":\"#非递归实现\",\"children\":[]}]},{\"level\":2,\"title\":\"中序遍历的前驱后继节点\",\"slug\":\"中序遍历的前驱后继节点\",\"link\":\"#中序遍历的前驱后继节点\",\"children\":[{\"level\":3,\"title\":\"前驱节点\",\"slug\":\"前驱节点\",\"link\":\"#前驱节点\",\"children\":[]},{\"level\":3,\"title\":\"后继节点\",\"slug\":\"后继节点\",\"link\":\"#后继节点\",\"children\":[]}]},{\"level\":2,\"title\":\"树的深度\",\"slug\":\"树的深度\",\"link\":\"#树的深度\",\"children\":[]},{\"level\":2,\"title\":\"斐波那契数列\",\"slug\":\"斐波那契数列\",\"link\":\"#斐波那契数列\",\"children\":[]},{\"level\":2,\"title\":\"0 - 1 背包问题\",\"slug\":\"_0-1-背包问题\",\"link\":\"#_0-1-背包问题\",\"children\":[]},{\"level\":2,\"title\":\"最长递增子序列\",\"slug\":\"最长递增子序列\",\"link\":\"#最长递增子序列\",\"children\":[]}],\"git\":{\"updatedTime\":1575362411000,\"contributors\":[{\"name\":\"guancong\",\"username\":\"guancong\",\"email\":\"guancong@elensdata.com\",\"commits\":1,\"url\":\"https://github.com/guancong\"}]},\"autoDesc\":true,\"filePathRelative\":\"cs/算法.md\"}")
export { comp, data }

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
